{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Aluno/Desktop/Nova pasta/integrador_2024/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\nimport { r as registerInstance, h, f as Host, i as getElement } from './index-9aab3bcf.js';\nimport { a as addEventListener, c as componentOnReady } from './helpers-da915de8.js';\nimport { a as printIonError } from './index-9b0d46f4.js';\nimport { c as createColorClasses } from './theme-01f3f29c.js';\nimport { b as getIonMode } from './ionic-global-4528d288.js';\nimport { s as parseDate, x as getToday, L as getHourCycle, N as getLocalizedDateTime, M as getLocalizedTime } from './data-ae11fd43.js';\nconst datetimeButtonIosCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, var(--ion-background-color-step-300, #edeef0));color:var(--ion-text-color, #000);font-family:inherit;font-size:1rem;cursor:pointer;overflow:hidden;-webkit-appearance:none;-moz-appearance:none;appearance:none}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}:host button{-webkit-padding-start:13px;padding-inline-start:13px;-webkit-padding-end:13px;padding-inline-end:13px;padding-top:7px;padding-bottom:7px}:host button.ion-activated{color:var(--ion-color-step-600, var(--ion-text-color-step-400, #666666))}\";\nconst IonDatetimeButtonIosStyle0 = datetimeButtonIosCss;\nconst datetimeButtonMdCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, var(--ion-background-color-step-300, #edeef0));color:var(--ion-text-color, #000);font-family:inherit;font-size:1rem;cursor:pointer;overflow:hidden;-webkit-appearance:none;-moz-appearance:none;appearance:none}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}:host button{-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px;padding-top:6px;padding-bottom:6px}\";\nconst IonDatetimeButtonMdStyle0 = datetimeButtonMdCss;\nconst DatetimeButton = class {\n  constructor(hostRef) {\n    var _this = this;\n    registerInstance(this, hostRef);\n    this.datetimeEl = null;\n    this.overlayEl = null;\n    /**\r\n     * Accepts one or more string values and converts\r\n     * them to DatetimeParts. This is done so datetime-button\r\n     * can work with an array internally and not need\r\n     * to keep checking if the datetime value is `string` or `string[]`.\r\n     */\n    this.getParsedDateValues = value => {\n      if (value === undefined || value === null) {\n        return [];\n      }\n      if (Array.isArray(value)) {\n        return value;\n      }\n      return [value];\n    };\n    /**\r\n     * Check the value property on the linked\r\n     * ion-datetime and then format it according\r\n     * to the locale specified on ion-datetime.\r\n     */\n    this.setDateTimeText = () => {\n      var _a, _b, _c, _d, _e;\n      const {\n        datetimeEl,\n        datetimePresentation\n      } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      const {\n        value,\n        locale,\n        formatOptions,\n        hourCycle,\n        preferWheel,\n        multiple,\n        titleSelectedDatesFormatter\n      } = datetimeEl;\n      const parsedValues = this.getParsedDateValues(value);\n      /**\r\n       * Both ion-datetime and ion-datetime-button default\r\n       * to today's date and time if no value is set.\r\n       */\n      const parsedDatetimes = parseDate(parsedValues.length > 0 ? parsedValues : [getToday()]);\n      if (!parsedDatetimes) {\n        return;\n      }\n      /**\r\n       * If developers incorrectly use multiple=\"true\"\r\n       * with non \"date\" datetimes, then just select\r\n       * the first value so the interface does\r\n       * not appear broken. Datetime will provide a\r\n       * warning in the console.\r\n       */\n      const firstParsedDatetime = parsedDatetimes[0];\n      const computedHourCycle = getHourCycle(locale, hourCycle);\n      this.dateText = this.timeText = undefined;\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_a = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _a !== void 0 ? _a : {\n            month: 'short',\n            day: 'numeric',\n            year: 'numeric'\n          });\n          const timeText = getLocalizedTime(locale, firstParsedDatetime, computedHourCycle, formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time);\n          if (preferWheel) {\n            this.dateText = `${dateText} ${timeText}`;\n          } else {\n            this.dateText = dateText;\n            this.timeText = timeText;\n          }\n          break;\n        case 'date':\n          if (multiple && parsedValues.length !== 1) {\n            let headerText = `${parsedValues.length} days`; // default/fallback for multiple selection\n            if (titleSelectedDatesFormatter !== undefined) {\n              try {\n                headerText = titleSelectedDatesFormatter(parsedValues);\n              } catch (e) {\n                printIonError('Exception in provided `titleSelectedDatesFormatter`: ', e);\n              }\n            }\n            this.dateText = headerText;\n          } else {\n            this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_b = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _b !== void 0 ? _b : {\n              month: 'short',\n              day: 'numeric',\n              year: 'numeric'\n            });\n          }\n          break;\n        case 'time':\n          this.timeText = getLocalizedTime(locale, firstParsedDatetime, computedHourCycle, formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time);\n          break;\n        case 'month-year':\n          this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_c = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _c !== void 0 ? _c : {\n            month: 'long',\n            year: 'numeric'\n          });\n          break;\n        case 'month':\n          this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_d = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time) !== null && _d !== void 0 ? _d : {\n            month: 'long'\n          });\n          break;\n        case 'year':\n          this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_e = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time) !== null && _e !== void 0 ? _e : {\n            year: 'numeric'\n          });\n          break;\n      }\n    };\n    /**\r\n     * Waits for the ion-datetime to re-render.\r\n     * This is needed in order to correctly position\r\n     * a popover relative to the trigger element.\r\n     */\n    this.waitForDatetimeChanges = /*#__PURE__*/_asyncToGenerator(function* () {\n      const {\n        datetimeEl\n      } = _this;\n      if (!datetimeEl) {\n        return Promise.resolve();\n      }\n      return new Promise(resolve => {\n        addEventListener(datetimeEl, 'ionRender', resolve, {\n          once: true\n        });\n      });\n    });\n    this.handleDateClick = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (ev) {\n        const {\n          datetimeEl,\n          datetimePresentation\n        } = _this;\n        if (!datetimeEl) {\n          return;\n        }\n        let needsPresentationChange = false;\n        /**\r\n         * When clicking the date button,\r\n         * we need to make sure that only a date\r\n         * picker is displayed. For presentation styles\r\n         * that display content other than a date picker,\r\n         * we need to update the presentation style.\r\n         */\n        switch (datetimePresentation) {\n          case 'date-time':\n          case 'time-date':\n            const needsChange = datetimeEl.presentation !== 'date';\n            /**\r\n             * The date+time wheel picker\r\n             * shows date and time together,\r\n             * so do not adjust the presentation\r\n             * in that case.\r\n             */\n            if (!datetimeEl.preferWheel && needsChange) {\n              datetimeEl.presentation = 'date';\n              needsPresentationChange = true;\n            }\n            break;\n        }\n        /**\r\n         * Track which button was clicked\r\n         * so that it can have the correct\r\n         * activated styles applied when\r\n         * the modal/popover containing\r\n         * the datetime is opened.\r\n         */\n        _this.selectedButton = 'date';\n        _this.presentOverlay(ev, needsPresentationChange, _this.dateTargetEl);\n      });\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    this.handleTimeClick = ev => {\n      const {\n        datetimeEl,\n        datetimePresentation\n      } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      let needsPresentationChange = false;\n      /**\r\n       * When clicking the time button,\r\n       * we need to make sure that only a time\r\n       * picker is displayed. For presentation styles\r\n       * that display content other than a time picker,\r\n       * we need to update the presentation style.\r\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const needsChange = datetimeEl.presentation !== 'time';\n          if (needsChange) {\n            datetimeEl.presentation = 'time';\n            needsPresentationChange = true;\n          }\n          break;\n      }\n      /**\r\n       * Track which button was clicked\r\n       * so that it can have the correct\r\n       * activated styles applied when\r\n       * the modal/popover containing\r\n       * the datetime is opened.\r\n       */\n      this.selectedButton = 'time';\n      this.presentOverlay(ev, needsPresentationChange, this.timeTargetEl);\n    };\n    /**\r\n     * If the datetime is presented in an\r\n     * overlay, the datetime and overlay\r\n     * should be appropriately sized.\r\n     * These classes provide default sizing values\r\n     * that developers can customize.\r\n     * The goal is to provide an overlay that is\r\n     * reasonably sized with a datetime that\r\n     * fills the entire container.\r\n     */\n    this.presentOverlay = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (ev, needsPresentationChange, triggerEl) {\n        const {\n          overlayEl\n        } = _this;\n        if (!overlayEl) {\n          return;\n        }\n        if (overlayEl.tagName === 'ION-POPOVER') {\n          /**\r\n           * When the presentation on datetime changes,\r\n           * we need to wait for the component to re-render\r\n           * otherwise the computed width/height of the\r\n           * popover content will be wrong, causing\r\n           * the popover to not align with the trigger element.\r\n           */\n          if (needsPresentationChange) {\n            yield _this.waitForDatetimeChanges();\n          }\n          /**\r\n           * We pass the trigger button element\r\n           * so that the popover aligns with the individual\r\n           * button that was clicked, not the component container.\r\n           */\n          overlayEl.present(Object.assign(Object.assign({}, ev), {\n            detail: {\n              ionShadowTarget: triggerEl\n            }\n          }));\n        } else {\n          overlayEl.present();\n        }\n      });\n      return function (_x2, _x3, _x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    this.datetimePresentation = 'date-time';\n    this.dateText = undefined;\n    this.timeText = undefined;\n    this.datetimeActive = false;\n    this.selectedButton = undefined;\n    this.color = 'primary';\n    this.disabled = false;\n    this.datetime = undefined;\n  }\n  componentWillLoad() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        datetime\n      } = _this2;\n      if (!datetime) {\n        printIonError('An ID associated with an ion-datetime instance is required for ion-datetime-button to function properly.', _this2.el);\n        return;\n      }\n      const datetimeEl = _this2.datetimeEl = document.getElementById(datetime);\n      if (!datetimeEl) {\n        printIonError(`No ion-datetime instance found for ID '${datetime}'.`, _this2.el);\n        return;\n      }\n      /**\r\n       * The element reference must be an ion-datetime. Print an error\r\n       * if a non-datetime element was provided.\r\n       */\n      if (datetimeEl.tagName !== 'ION-DATETIME') {\n        printIonError(`Expected an ion-datetime instance for ID '${datetime}' but received '${datetimeEl.tagName.toLowerCase()}' instead.`, datetimeEl);\n        return;\n      }\n      /**\r\n       * Since the datetime can be used in any context (overlays, accordion, etc)\r\n       * we track when it is visible to determine when it is active.\r\n       * This informs which button is highlighted as well as the\r\n       * aria-expanded state.\r\n       */\n      const io = new IntersectionObserver(entries => {\n        const ev = entries[0];\n        _this2.datetimeActive = ev.isIntersecting;\n      }, {\n        threshold: 0.01\n      });\n      io.observe(datetimeEl);\n      /**\r\n       * Get a reference to any modal/popover\r\n       * the datetime is being used in so we can\r\n       * correctly size it when it is presented.\r\n       */\n      const overlayEl = _this2.overlayEl = datetimeEl.closest('ion-modal, ion-popover');\n      /**\r\n       * The .ion-datetime-button-overlay class contains\r\n       * styles that allow any modal/popover to be\r\n       * sized according to the dimensions of the datetime.\r\n       * If developers want a smaller/larger overlay all they need\r\n       * to do is change the width/height of the datetime.\r\n       * Additionally, this lets us avoid having to set\r\n       * explicit widths on each variant of datetime.\r\n       */\n      if (overlayEl) {\n        overlayEl.classList.add('ion-datetime-button-overlay');\n      }\n      componentOnReady(datetimeEl, () => {\n        const datetimePresentation = _this2.datetimePresentation = datetimeEl.presentation || 'date-time';\n        /**\r\n         * Set the initial display\r\n         * in the rendered buttons.\r\n         *\r\n         * From there, we need to listen\r\n         * for ionChange to be emitted\r\n         * from datetime so we know when\r\n         * to re-render the displayed\r\n         * text in the buttons.\r\n         */\n        _this2.setDateTimeText();\n        addEventListener(datetimeEl, 'ionValueChange', _this2.setDateTimeText);\n        /**\r\n         * Configure the initial selected button\r\n         * in the event that the datetime is displayed\r\n         * without clicking one of the datetime buttons.\r\n         * For example, a datetime could be expanded\r\n         * in an accordion. In this case users only\r\n         * need to click the accordion header to show\r\n         * the datetime.\r\n         */\n        switch (datetimePresentation) {\n          case 'date-time':\n          case 'date':\n          case 'month-year':\n          case 'month':\n          case 'year':\n            _this2.selectedButton = 'date';\n            break;\n          case 'time-date':\n          case 'time':\n            _this2.selectedButton = 'time';\n            break;\n        }\n      });\n    })();\n  }\n  render() {\n    const {\n      color,\n      dateText,\n      timeText,\n      selectedButton,\n      datetimeActive,\n      disabled\n    } = this;\n    const mode = getIonMode(this);\n    return h(Host, {\n      key: '0be955404133adbb31ae16a6599014bb29765f19',\n      class: createColorClasses(color, {\n        [mode]: true,\n        [`${selectedButton}-active`]: datetimeActive,\n        ['datetime-button-disabled']: disabled\n      })\n    }, dateText && h(\"button\", {\n      key: '812dcb50b17768cc13a5cfa0bcce8b113cee0f09',\n      class: \"ion-activatable\",\n      id: \"date-button\",\n      \"aria-expanded\": datetimeActive ? 'true' : 'false',\n      onClick: this.handleDateClick,\n      disabled: disabled,\n      part: \"native\",\n      ref: el => this.dateTargetEl = el\n    }, h(\"slot\", {\n      key: '46930c740a32a78502df9e651f9bd5914d6a9fea',\n      name: \"date-target\"\n    }, dateText), mode === 'md' && h(\"ion-ripple-effect\", {\n      key: '0602999cc8435dc37aa22da7f5531bc8cb71e1b4'\n    })), timeText && h(\"button\", {\n      key: 'ecdd21da5181ecbdce03209f9f6673b7dcbc1f78',\n      class: \"ion-activatable\",\n      id: \"time-button\",\n      \"aria-expanded\": datetimeActive ? 'true' : 'false',\n      onClick: this.handleTimeClick,\n      disabled: disabled,\n      part: \"native\",\n      ref: el => this.timeTargetEl = el\n    }, h(\"slot\", {\n      key: 'b5b093b5166d12d11e27360788edaac916d44390',\n      name: \"time-target\"\n    }, timeText), mode === 'md' && h(\"ion-ripple-effect\", {\n      key: '70bb3a04f4748d13233eeb257503968dbd1161a9'\n    })));\n  }\n  get el() {\n    return getElement(this);\n  }\n};\nDatetimeButton.style = {\n  ios: IonDatetimeButtonIosStyle0,\n  md: IonDatetimeButtonMdStyle0\n};\nexport { DatetimeButton as ion_datetime_button };","map":{"version":3,"names":["r","registerInstance","h","f","Host","i","getElement","a","addEventListener","c","componentOnReady","printIonError","createColorClasses","b","getIonMode","s","parseDate","x","getToday","L","getHourCycle","N","getLocalizedDateTime","M","getLocalizedTime","datetimeButtonIosCss","IonDatetimeButtonIosStyle0","datetimeButtonMdCss","IonDatetimeButtonMdStyle0","DatetimeButton","constructor","hostRef","_this","datetimeEl","overlayEl","getParsedDateValues","value","undefined","Array","isArray","setDateTimeText","_a","_b","_c","_d","_e","datetimePresentation","locale","formatOptions","hourCycle","preferWheel","multiple","titleSelectedDatesFormatter","parsedValues","parsedDatetimes","length","firstParsedDatetime","computedHourCycle","dateText","timeText","date","month","day","year","time","headerText","e","waitForDatetimeChanges","_asyncToGenerator","Promise","resolve","once","handleDateClick","_ref2","ev","needsPresentationChange","needsChange","presentation","selectedButton","presentOverlay","dateTargetEl","_x","apply","arguments","handleTimeClick","timeTargetEl","_ref3","triggerEl","tagName","present","Object","assign","detail","ionShadowTarget","_x2","_x3","_x4","datetimeActive","color","disabled","datetime","componentWillLoad","_this2","el","document","getElementById","toLowerCase","io","IntersectionObserver","entries","isIntersecting","threshold","observe","closest","classList","add","render","mode","key","class","id","onClick","part","ref","name","style","ios","md","ion_datetime_button"],"sources":["C:/Users/Aluno/Desktop/Nova pasta/integrador_2024/node_modules/@ionic/core/dist/esm/ion-datetime-button.entry.js"],"sourcesContent":["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nimport { r as registerInstance, h, f as Host, i as getElement } from './index-9aab3bcf.js';\r\nimport { a as addEventListener, c as componentOnReady } from './helpers-da915de8.js';\r\nimport { a as printIonError } from './index-9b0d46f4.js';\r\nimport { c as createColorClasses } from './theme-01f3f29c.js';\r\nimport { b as getIonMode } from './ionic-global-4528d288.js';\r\nimport { s as parseDate, x as getToday, L as getHourCycle, N as getLocalizedDateTime, M as getLocalizedTime } from './data-ae11fd43.js';\r\n\r\nconst datetimeButtonIosCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, var(--ion-background-color-step-300, #edeef0));color:var(--ion-text-color, #000);font-family:inherit;font-size:1rem;cursor:pointer;overflow:hidden;-webkit-appearance:none;-moz-appearance:none;appearance:none}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}:host button{-webkit-padding-start:13px;padding-inline-start:13px;-webkit-padding-end:13px;padding-inline-end:13px;padding-top:7px;padding-bottom:7px}:host button.ion-activated{color:var(--ion-color-step-600, var(--ion-text-color-step-400, #666666))}\";\r\nconst IonDatetimeButtonIosStyle0 = datetimeButtonIosCss;\r\n\r\nconst datetimeButtonMdCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, var(--ion-background-color-step-300, #edeef0));color:var(--ion-text-color, #000);font-family:inherit;font-size:1rem;cursor:pointer;overflow:hidden;-webkit-appearance:none;-moz-appearance:none;appearance:none}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}:host button{-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px;padding-top:6px;padding-bottom:6px}\";\r\nconst IonDatetimeButtonMdStyle0 = datetimeButtonMdCss;\r\n\r\nconst DatetimeButton = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.datetimeEl = null;\r\n        this.overlayEl = null;\r\n        /**\r\n         * Accepts one or more string values and converts\r\n         * them to DatetimeParts. This is done so datetime-button\r\n         * can work with an array internally and not need\r\n         * to keep checking if the datetime value is `string` or `string[]`.\r\n         */\r\n        this.getParsedDateValues = (value) => {\r\n            if (value === undefined || value === null) {\r\n                return [];\r\n            }\r\n            if (Array.isArray(value)) {\r\n                return value;\r\n            }\r\n            return [value];\r\n        };\r\n        /**\r\n         * Check the value property on the linked\r\n         * ion-datetime and then format it according\r\n         * to the locale specified on ion-datetime.\r\n         */\r\n        this.setDateTimeText = () => {\r\n            var _a, _b, _c, _d, _e;\r\n            const { datetimeEl, datetimePresentation } = this;\r\n            if (!datetimeEl) {\r\n                return;\r\n            }\r\n            const { value, locale, formatOptions, hourCycle, preferWheel, multiple, titleSelectedDatesFormatter } = datetimeEl;\r\n            const parsedValues = this.getParsedDateValues(value);\r\n            /**\r\n             * Both ion-datetime and ion-datetime-button default\r\n             * to today's date and time if no value is set.\r\n             */\r\n            const parsedDatetimes = parseDate(parsedValues.length > 0 ? parsedValues : [getToday()]);\r\n            if (!parsedDatetimes) {\r\n                return;\r\n            }\r\n            /**\r\n             * If developers incorrectly use multiple=\"true\"\r\n             * with non \"date\" datetimes, then just select\r\n             * the first value so the interface does\r\n             * not appear broken. Datetime will provide a\r\n             * warning in the console.\r\n             */\r\n            const firstParsedDatetime = parsedDatetimes[0];\r\n            const computedHourCycle = getHourCycle(locale, hourCycle);\r\n            this.dateText = this.timeText = undefined;\r\n            switch (datetimePresentation) {\r\n                case 'date-time':\r\n                case 'time-date':\r\n                    const dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_a = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _a !== void 0 ? _a : { month: 'short', day: 'numeric', year: 'numeric' });\r\n                    const timeText = getLocalizedTime(locale, firstParsedDatetime, computedHourCycle, formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time);\r\n                    if (preferWheel) {\r\n                        this.dateText = `${dateText} ${timeText}`;\r\n                    }\r\n                    else {\r\n                        this.dateText = dateText;\r\n                        this.timeText = timeText;\r\n                    }\r\n                    break;\r\n                case 'date':\r\n                    if (multiple && parsedValues.length !== 1) {\r\n                        let headerText = `${parsedValues.length} days`; // default/fallback for multiple selection\r\n                        if (titleSelectedDatesFormatter !== undefined) {\r\n                            try {\r\n                                headerText = titleSelectedDatesFormatter(parsedValues);\r\n                            }\r\n                            catch (e) {\r\n                                printIonError('Exception in provided `titleSelectedDatesFormatter`: ', e);\r\n                            }\r\n                        }\r\n                        this.dateText = headerText;\r\n                    }\r\n                    else {\r\n                        this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_b = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _b !== void 0 ? _b : { month: 'short', day: 'numeric', year: 'numeric' });\r\n                    }\r\n                    break;\r\n                case 'time':\r\n                    this.timeText = getLocalizedTime(locale, firstParsedDatetime, computedHourCycle, formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time);\r\n                    break;\r\n                case 'month-year':\r\n                    this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_c = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _c !== void 0 ? _c : { month: 'long', year: 'numeric' });\r\n                    break;\r\n                case 'month':\r\n                    this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_d = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time) !== null && _d !== void 0 ? _d : { month: 'long' });\r\n                    break;\r\n                case 'year':\r\n                    this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_e = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time) !== null && _e !== void 0 ? _e : { year: 'numeric' });\r\n                    break;\r\n            }\r\n        };\r\n        /**\r\n         * Waits for the ion-datetime to re-render.\r\n         * This is needed in order to correctly position\r\n         * a popover relative to the trigger element.\r\n         */\r\n        this.waitForDatetimeChanges = async () => {\r\n            const { datetimeEl } = this;\r\n            if (!datetimeEl) {\r\n                return Promise.resolve();\r\n            }\r\n            return new Promise((resolve) => {\r\n                addEventListener(datetimeEl, 'ionRender', resolve, { once: true });\r\n            });\r\n        };\r\n        this.handleDateClick = async (ev) => {\r\n            const { datetimeEl, datetimePresentation } = this;\r\n            if (!datetimeEl) {\r\n                return;\r\n            }\r\n            let needsPresentationChange = false;\r\n            /**\r\n             * When clicking the date button,\r\n             * we need to make sure that only a date\r\n             * picker is displayed. For presentation styles\r\n             * that display content other than a date picker,\r\n             * we need to update the presentation style.\r\n             */\r\n            switch (datetimePresentation) {\r\n                case 'date-time':\r\n                case 'time-date':\r\n                    const needsChange = datetimeEl.presentation !== 'date';\r\n                    /**\r\n                     * The date+time wheel picker\r\n                     * shows date and time together,\r\n                     * so do not adjust the presentation\r\n                     * in that case.\r\n                     */\r\n                    if (!datetimeEl.preferWheel && needsChange) {\r\n                        datetimeEl.presentation = 'date';\r\n                        needsPresentationChange = true;\r\n                    }\r\n                    break;\r\n            }\r\n            /**\r\n             * Track which button was clicked\r\n             * so that it can have the correct\r\n             * activated styles applied when\r\n             * the modal/popover containing\r\n             * the datetime is opened.\r\n             */\r\n            this.selectedButton = 'date';\r\n            this.presentOverlay(ev, needsPresentationChange, this.dateTargetEl);\r\n        };\r\n        this.handleTimeClick = (ev) => {\r\n            const { datetimeEl, datetimePresentation } = this;\r\n            if (!datetimeEl) {\r\n                return;\r\n            }\r\n            let needsPresentationChange = false;\r\n            /**\r\n             * When clicking the time button,\r\n             * we need to make sure that only a time\r\n             * picker is displayed. For presentation styles\r\n             * that display content other than a time picker,\r\n             * we need to update the presentation style.\r\n             */\r\n            switch (datetimePresentation) {\r\n                case 'date-time':\r\n                case 'time-date':\r\n                    const needsChange = datetimeEl.presentation !== 'time';\r\n                    if (needsChange) {\r\n                        datetimeEl.presentation = 'time';\r\n                        needsPresentationChange = true;\r\n                    }\r\n                    break;\r\n            }\r\n            /**\r\n             * Track which button was clicked\r\n             * so that it can have the correct\r\n             * activated styles applied when\r\n             * the modal/popover containing\r\n             * the datetime is opened.\r\n             */\r\n            this.selectedButton = 'time';\r\n            this.presentOverlay(ev, needsPresentationChange, this.timeTargetEl);\r\n        };\r\n        /**\r\n         * If the datetime is presented in an\r\n         * overlay, the datetime and overlay\r\n         * should be appropriately sized.\r\n         * These classes provide default sizing values\r\n         * that developers can customize.\r\n         * The goal is to provide an overlay that is\r\n         * reasonably sized with a datetime that\r\n         * fills the entire container.\r\n         */\r\n        this.presentOverlay = async (ev, needsPresentationChange, triggerEl) => {\r\n            const { overlayEl } = this;\r\n            if (!overlayEl) {\r\n                return;\r\n            }\r\n            if (overlayEl.tagName === 'ION-POPOVER') {\r\n                /**\r\n                 * When the presentation on datetime changes,\r\n                 * we need to wait for the component to re-render\r\n                 * otherwise the computed width/height of the\r\n                 * popover content will be wrong, causing\r\n                 * the popover to not align with the trigger element.\r\n                 */\r\n                if (needsPresentationChange) {\r\n                    await this.waitForDatetimeChanges();\r\n                }\r\n                /**\r\n                 * We pass the trigger button element\r\n                 * so that the popover aligns with the individual\r\n                 * button that was clicked, not the component container.\r\n                 */\r\n                overlayEl.present(Object.assign(Object.assign({}, ev), { detail: {\r\n                        ionShadowTarget: triggerEl,\r\n                    } }));\r\n            }\r\n            else {\r\n                overlayEl.present();\r\n            }\r\n        };\r\n        this.datetimePresentation = 'date-time';\r\n        this.dateText = undefined;\r\n        this.timeText = undefined;\r\n        this.datetimeActive = false;\r\n        this.selectedButton = undefined;\r\n        this.color = 'primary';\r\n        this.disabled = false;\r\n        this.datetime = undefined;\r\n    }\r\n    async componentWillLoad() {\r\n        const { datetime } = this;\r\n        if (!datetime) {\r\n            printIonError('An ID associated with an ion-datetime instance is required for ion-datetime-button to function properly.', this.el);\r\n            return;\r\n        }\r\n        const datetimeEl = (this.datetimeEl = document.getElementById(datetime));\r\n        if (!datetimeEl) {\r\n            printIonError(`No ion-datetime instance found for ID '${datetime}'.`, this.el);\r\n            return;\r\n        }\r\n        /**\r\n         * The element reference must be an ion-datetime. Print an error\r\n         * if a non-datetime element was provided.\r\n         */\r\n        if (datetimeEl.tagName !== 'ION-DATETIME') {\r\n            printIonError(`Expected an ion-datetime instance for ID '${datetime}' but received '${datetimeEl.tagName.toLowerCase()}' instead.`, datetimeEl);\r\n            return;\r\n        }\r\n        /**\r\n         * Since the datetime can be used in any context (overlays, accordion, etc)\r\n         * we track when it is visible to determine when it is active.\r\n         * This informs which button is highlighted as well as the\r\n         * aria-expanded state.\r\n         */\r\n        const io = new IntersectionObserver((entries) => {\r\n            const ev = entries[0];\r\n            this.datetimeActive = ev.isIntersecting;\r\n        }, {\r\n            threshold: 0.01,\r\n        });\r\n        io.observe(datetimeEl);\r\n        /**\r\n         * Get a reference to any modal/popover\r\n         * the datetime is being used in so we can\r\n         * correctly size it when it is presented.\r\n         */\r\n        const overlayEl = (this.overlayEl = datetimeEl.closest('ion-modal, ion-popover'));\r\n        /**\r\n         * The .ion-datetime-button-overlay class contains\r\n         * styles that allow any modal/popover to be\r\n         * sized according to the dimensions of the datetime.\r\n         * If developers want a smaller/larger overlay all they need\r\n         * to do is change the width/height of the datetime.\r\n         * Additionally, this lets us avoid having to set\r\n         * explicit widths on each variant of datetime.\r\n         */\r\n        if (overlayEl) {\r\n            overlayEl.classList.add('ion-datetime-button-overlay');\r\n        }\r\n        componentOnReady(datetimeEl, () => {\r\n            const datetimePresentation = (this.datetimePresentation = datetimeEl.presentation || 'date-time');\r\n            /**\r\n             * Set the initial display\r\n             * in the rendered buttons.\r\n             *\r\n             * From there, we need to listen\r\n             * for ionChange to be emitted\r\n             * from datetime so we know when\r\n             * to re-render the displayed\r\n             * text in the buttons.\r\n             */\r\n            this.setDateTimeText();\r\n            addEventListener(datetimeEl, 'ionValueChange', this.setDateTimeText);\r\n            /**\r\n             * Configure the initial selected button\r\n             * in the event that the datetime is displayed\r\n             * without clicking one of the datetime buttons.\r\n             * For example, a datetime could be expanded\r\n             * in an accordion. In this case users only\r\n             * need to click the accordion header to show\r\n             * the datetime.\r\n             */\r\n            switch (datetimePresentation) {\r\n                case 'date-time':\r\n                case 'date':\r\n                case 'month-year':\r\n                case 'month':\r\n                case 'year':\r\n                    this.selectedButton = 'date';\r\n                    break;\r\n                case 'time-date':\r\n                case 'time':\r\n                    this.selectedButton = 'time';\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    render() {\r\n        const { color, dateText, timeText, selectedButton, datetimeActive, disabled } = this;\r\n        const mode = getIonMode(this);\r\n        return (h(Host, { key: '0be955404133adbb31ae16a6599014bb29765f19', class: createColorClasses(color, {\r\n                [mode]: true,\r\n                [`${selectedButton}-active`]: datetimeActive,\r\n                ['datetime-button-disabled']: disabled,\r\n            }) }, dateText && (h(\"button\", { key: '812dcb50b17768cc13a5cfa0bcce8b113cee0f09', class: \"ion-activatable\", id: \"date-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleDateClick, disabled: disabled, part: \"native\", ref: (el) => (this.dateTargetEl = el) }, h(\"slot\", { key: '46930c740a32a78502df9e651f9bd5914d6a9fea', name: \"date-target\" }, dateText), mode === 'md' && h(\"ion-ripple-effect\", { key: '0602999cc8435dc37aa22da7f5531bc8cb71e1b4' }))), timeText && (h(\"button\", { key: 'ecdd21da5181ecbdce03209f9f6673b7dcbc1f78', class: \"ion-activatable\", id: \"time-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleTimeClick, disabled: disabled, part: \"native\", ref: (el) => (this.timeTargetEl = el) }, h(\"slot\", { key: 'b5b093b5166d12d11e27360788edaac916d44390', name: \"time-target\" }, timeText), mode === 'md' && h(\"ion-ripple-effect\", { key: '70bb3a04f4748d13233eeb257503968dbd1161a9' })))));\r\n    }\r\n    get el() { return getElement(this); }\r\n};\r\nDatetimeButton.style = {\r\n    ios: IonDatetimeButtonIosStyle0,\r\n    md: IonDatetimeButtonMdStyle0\r\n};\r\n\r\nexport { DatetimeButton as ion_datetime_button };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}