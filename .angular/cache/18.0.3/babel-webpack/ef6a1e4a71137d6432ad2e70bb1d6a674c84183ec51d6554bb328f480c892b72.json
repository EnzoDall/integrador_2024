{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/enzod/integrador-07_07/Integrador_reservas/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport firebase from 'firebase/app'; // Importe firebase para acessar o Timestamp\nlet ReservasPage = class ReservasPage {\n  constructor(navCtrl, toastController, firestore // Injete o AngularFirestore\n  ) {\n    this.navCtrl = navCtrl;\n    this.toastController = toastController;\n    this.firestore = firestore;\n    this.reserva = {\n      nome: '',\n      email: '',\n      numeroPessoas: '',\n      tipoMesa: '',\n      data: '',\n      horario: ''\n    };\n    this.currentDate = new Date().toISOString();\n  }\n  submitReserva() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Verificar o tipo de mesa selecionado\n      const tipoMesa = _this.reserva.tipoMesa; // Supondo que tipoMesa seja 'aLaCarte' ou 'rodizio'\n      // Consultar o limite de mesas disponíveis\n      const limiteRef = _this.firestore.collection('reservas').doc('restaurante1').collection('limiteMesas').doc(tipoMesa);\n      const limiteSnapshot = yield limiteRef.get().toPromise();\n      if (limiteSnapshot.exists) {\n        const limite = limiteSnapshot.data().limite; // Obter o limite de mesas do tipo selecionado\n        // Consultar reservas já realizadas para a data e horário selecionados\n        const reservasRef = _this.firestore.collection('reservas').doc('restaurante1').collection('reservasRealizadas');\n        const reservasQuery = reservasRef.where('data', '==', _this.reserva.data).where('horario', '==', _this.reserva.horario).where('tipoMesa', '==', tipoMesa).get();\n        const reservas = yield reservasQuery.toPromise();\n        if (reservas.size < limite) {\n          // Adicionar reserva ao Firebase\n          const timestamp = firebase.firestore.Timestamp.fromDate(new Date());\n          yield reservasRef.add({\n            nome: _this.reserva.nome,\n            email: _this.reserva.email,\n            numeroPessoas: _this.reserva.numeroPessoas,\n            tipoMesa: tipoMesa,\n            data: _this.reserva.data,\n            horario: _this.reserva.horario,\n            timestamp: timestamp\n          });\n          // Mostrar toast de sucesso\n          _this.mostrarToast('Reserva realizada com sucesso!');\n          _this.reserva = {\n            nome: '',\n            email: '',\n            numeroPessoas: '',\n            tipoMesa: '',\n            data: '',\n            horario: ''\n          }; // Limpar formulário após reserva\n        } else {\n          // Mostrar mensagem de erro\n          _this.mostrarToast(`Limite de mesas ${tipoMesa} atingido para esta data e horário.`);\n        }\n      } else {\n        // Mostrar mensagem de erro caso o tipo de mesa não exista na base de dados\n        _this.mostrarToast(`Tipo de mesa '${tipoMesa}' não encontrado.`);\n      }\n    })();\n  }\n  mostrarToast(mensagem) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const toast = yield _this2.toastController.create({\n        message: mensagem,\n        duration: 3000,\n        // 3 segundos\n        position: 'bottom'\n      });\n      toast.present();\n    })();\n  }\n  irParaLogin() {\n    this.navCtrl.navigateForward('/login'); // Navegação para página de login\n  }\n};\nReservasPage = __decorate([Component({\n  selector: 'app-reservas',\n  templateUrl: './reservas.page.html',\n  styleUrls: ['./reservas.page.scss']\n})], ReservasPage);\nexport { ReservasPage };","map":{"version":3,"names":["Component","firebase","ReservasPage","constructor","navCtrl","toastController","firestore","reserva","nome","email","numeroPessoas","tipoMesa","data","horario","currentDate","Date","toISOString","submitReserva","_this","_asyncToGenerator","limiteRef","collection","doc","limiteSnapshot","get","toPromise","exists","limite","reservasRef","reservasQuery","where","reservas","size","timestamp","Timestamp","fromDate","add","mostrarToast","mensagem","_this2","toast","create","message","duration","position","present","irParaLogin","navigateForward","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\enzod\\integrador-07_07\\Integrador_reservas\\src\\app\\views\\reservas\\reservas.page.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { NavController, ToastController } from '@ionic/angular';\r\nimport { AngularFirestore } from '@angular/fire/firestore'; // Importe o AngularFirestore\r\nimport firebase from 'firebase/app'; // Importe firebase para acessar o Timestamp\r\n\r\n@Component({\r\n  selector: 'app-reservas',\r\n  templateUrl: './reservas.page.html',\r\n  styleUrls: ['./reservas.page.scss'],\r\n})\r\nexport class ReservasPage {\r\n\r\n  currentDate: string;\r\n  reserva = {\r\n    nome: '',\r\n    email: '',\r\n    numeroPessoas: '',\r\n    tipoMesa: '',\r\n    data: '',\r\n    horario: ''\r\n  };\r\n\r\n  constructor(\r\n    private navCtrl: NavController,\r\n    private toastController: ToastController,\r\n    private firestore: AngularFirestore // Injete o AngularFirestore\r\n  ) {\r\n    this.currentDate = new Date().toISOString();\r\n  }\r\n\r\n  async submitReserva() {\r\n    // Verificar o tipo de mesa selecionado\r\n    const tipoMesa = this.reserva.tipoMesa; // Supondo que tipoMesa seja 'aLaCarte' ou 'rodizio'\r\n    \r\n    // Consultar o limite de mesas disponíveis\r\n    const limiteRef = this.firestore.collection('reservas').doc('restaurante1').collection('limiteMesas').doc(tipoMesa);\r\n    const limiteSnapshot = await limiteRef.get().toPromise();\r\n\r\n    if (limiteSnapshot.exists) {\r\n      const limite = limiteSnapshot.data().limite; // Obter o limite de mesas do tipo selecionado\r\n\r\n      // Consultar reservas já realizadas para a data e horário selecionados\r\n      const reservasRef = this.firestore.collection('reservas').doc('restaurante1').collection('reservasRealizadas');\r\n      const reservasQuery = reservasRef\r\n        .where('data', '==', this.reserva.data)\r\n        .where('horario', '==', this.reserva.horario)\r\n        .where('tipoMesa', '==', tipoMesa)\r\n        .get();\r\n\r\n      const reservas = await reservasQuery.toPromise();\r\n      \r\n      if (reservas.size < limite) {\r\n        // Adicionar reserva ao Firebase\r\n        const timestamp = firebase.firestore.Timestamp.fromDate(new Date());\r\n\r\n        await reservasRef.add({\r\n          nome: this.reserva.nome,\r\n          email: this.reserva.email,\r\n          numeroPessoas: this.reserva.numeroPessoas,\r\n          tipoMesa: tipoMesa,\r\n          data: this.reserva.data,\r\n          horario: this.reserva.horario,\r\n          timestamp: timestamp\r\n        });\r\n\r\n        // Mostrar toast de sucesso\r\n        this.mostrarToast('Reserva realizada com sucesso!');\r\n        this.reserva = { nome: '', email: '', numeroPessoas: '', tipoMesa: '', data: '', horario: '' }; // Limpar formulário após reserva\r\n      } else {\r\n        // Mostrar mensagem de erro\r\n        this.mostrarToast(`Limite de mesas ${tipoMesa} atingido para esta data e horário.`);\r\n      }\r\n    } else {\r\n      // Mostrar mensagem de erro caso o tipo de mesa não exista na base de dados\r\n      this.mostrarToast(`Tipo de mesa '${tipoMesa}' não encontrado.`);\r\n    }\r\n  }\r\n\r\n  async mostrarToast(mensagem: string) {\r\n    const toast = await this.toastController.create({\r\n      message: mensagem,\r\n      duration: 3000, // 3 segundos\r\n      position: 'bottom'\r\n    });\r\n    toast.present();\r\n  }\r\n\r\n  irParaLogin() {\r\n    this.navCtrl.navigateForward('/login'); // Navegação para página de login\r\n  }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}